var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"Modules = [Mueller]","category":"page"},{"location":"api/#Mueller.hwp","page":"API/Reference","title":"Mueller.hwp","text":"hwp([T=Float64], θ=0)\n\nA half-wave plate (HWP) with fast axis oriented at angle θ, in radians.\n\nExamples\n\njulia> M = hwp()\n4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n 1.0   0.0   0.0           0.0\n 0.0   1.0   0.0           0.0\n 0.0   0.0  -1.0          -1.22465e-16\n 0.0  -0.0   1.22465e-16  -1.0\n\njulia> S = [1, 1, 0, 0]; # I, Q, U, V\n\njulia> M * S # allow +Q through unchanged\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n 1.0\n 1.0\n 0.0\n 0.0\n\njulia> rotate(M, π/8) * S # switch +Q to +U\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n  1.0\n  1.9967346175427393e-16\n  1.0\n -8.659560562354932e-17\n\n\nSee also\n\nwaveplate, qwp\n\n\n\n\n\n","category":"function"},{"location":"api/#Mueller.linear_polarizer","page":"API/Reference","title":"Mueller.linear_polarizer","text":"linear_polarizer([T=Float64], θ=0; p=1)\n\nA linear polarizer with the throughput axis given by θ, in radians, by default horizontal. The partial polarization can be given with the p keyword argument, which changes the intensity by a factor of p^2/2.\n\nExamples\n\njulia> M = linear_polarizer()\n4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n  0.5   0.5   0.0  0.0\n  0.5   0.5   0.0  0.0\n -0.0  -0.0  -0.0  0.0\n  0.0   0.0   0.0  0.0\n\njulia> S = [1, 0, 0, 0]; # I, Q, U, V\n\njulia> M * S # only horizontal component (+Q) remains\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n 0.5\n 0.5\n 0.0\n 0.0\n\n\n\n\n\n","category":"function"},{"location":"api/#Mueller.mirror","page":"API/Reference","title":"Mueller.mirror","text":"mirror([T=Float64], r=1, θ=0, δ=π)\n\nA reflective mirror with reflectance r, oriented at angle θ, in radians, compared to the reference frame of the light, and with phase shift δ. An ideal mirror will have perfect reflectance and a 180° phase shift.\n\nExamples\n\njulia> M = mirror()\n4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n 1.0  0.0   0.0           0.0\n 0.0  1.0   0.0          -0.0\n 0.0  0.0  -1.0           1.22465e-16\n 0.0  0.0  -1.22465e-16  -1.0\n\njulia> S = [1, 1, 0, 0]; # I, Q, U, V\n\njulia> M * S # no change\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n 1.0\n 1.0\n 0.0\n 0.0\n\njulia> mirror(1, π/4) * S # rotates polarized light\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n  1.0\n -1.0\n  1.2246467991473532e-16\n  1.2246467991473532e-16\n\n\n\n\n\n","category":"function"},{"location":"api/#Mueller.polellipse","page":"API/Reference","title":"Mueller.polellipse","text":"polellipse(S)\npolellipse!(S)\n\nPlot the polarizatio ellipse for the given Stokes parameters. The polarization ellipse draws the path of the eletric field over one wavelength. The input vector should be a Stokes vector [I, Q, U, V]. This is a user recipe and can be composed with other plot recipes.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mueller.qwp","page":"API/Reference","title":"Mueller.qwp","text":"qwp([T=Float64], θ=0)\n\nA quarter-wave plate (QWP) with fast axis oriented at angle θ, in radians. The degree of polarization can be set with the keyword argument p, which will change the intensity by a factor of p^2/2.\n\nExamples\n\njulia> M = qwp()\n4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n 1.0   0.0  0.0           0.0\n 0.0   1.0  0.0           0.0\n 0.0   0.0  6.12323e-17  -1.0\n 0.0  -0.0  1.0           6.12323e-17\n\njulia> S = [1, 1, 0, 0]; # I, Q, U, V\n\njulia> M * S # allow +Q through unchanged\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n 1.0\n 1.0\n 0.0\n 0.0\n\njulia> hwp(π/8) * S # switch +Q to +U\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n  1.0\n  2.220446049250313e-16\n  1.0\n -8.659560562354932e-17\n\nSee also\n\nwaveplate, hwp\n\n\n\n\n\n","category":"function"},{"location":"api/#Mueller.rotate-Union{Tuple{T}, Tuple{AbstractMatrix{T}, Any}} where T","page":"API/Reference","title":"Mueller.rotate","text":"rotate(M, θ)\n\nRotates the component represented by the Mueller matrix M counter-clockwise by angle θ (in radians).\n\nExamples\n\njulia> M = linear_polarizer();\n\njulia> Mr = rotate(M, π/2);\n\njulia> Mr ≈ linear_polarizer(π/2)\ntrue\n\nSee also\n\nMueller.rotation\n\n\n\n\n\n","category":"method"},{"location":"api/#Mueller.rotation-Tuple{Any, Any}","page":"API/Reference","title":"Mueller.rotation","text":"Mueller.rotation([T=Float64], θ)\n\nGenerate a rotation matrix with the given angle, in radians, θ. This can be used to rotate the axes of polarization components arbitrarily. For convenience, the rotate method will rotate a component, without having to generate this matrix, itself.\n\nExamples\n\nRotate a linear polarizer by 90 degrees counter-clockwise\n\njulia> M = linear_polarizer();\n\njulia> r = Mueller.rotation(π/4);\n\njulia> Mr = r' * M * r;\n\njulia> Mr ≈ linear_polarizer(π/4)\nfalse\n\nSee also\n\nrotate\n\n\n\n\n\n","category":"method"},{"location":"api/#Mueller.waveplate","page":"API/Reference","title":"Mueller.waveplate","text":"waveplate([T=Float64], θ=0, δ=0)\n\nA generic phase retarder (waveplate) with fast axis aligned with angle θ, in radians, and phase delay of δ, in radians, along the slow axis. The degree of polarization can be set with the keyword argument p, which will change the intensity by a factor of p^2/2.\n\nExamples\n\njulia> M = waveplate(0, π);\n\njulia> M ≈ hwp()\ntrue\n\njulia> M = waveplate(π/2, π/2);\n\njulia> M ≈ qwp(π/2)\ntrue\n\nSee also\n\nhwp, qwp, mirror\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The following are some examples using Mueller.jl. These examples are simple demonstrations of the wave-nature of light, and how it can be measured and changed.","category":"page"},{"location":"examples/#Bell's-inequality","page":"Examples","title":"Bell's inequality","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Inspired by this video, we can demonstrate Bell's Theroem on orthogonal states of polarized light. First, let's look at the effect a single linear polarizer has on unpolarized light.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mueller\nusing Plots\nusing Unitful: °\nusing UnitfulRecipes\n\n# Stokes vector: I, Q, U, V\nS = [1, 0, 0, 0]\nM0 = linear_polarizer()\nSp = M0 * S","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"the total intensity is halved, and that half is polarized in the +Q direction. We can visualize this by drawing the polarization ellipse, which is the path traced by the electric field in the electromagnetic wave over one cycle. The polellipse plot recipe plots this ellipse from a Stokes vector.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"polellipse(Sp, label=\"0° LP\", lims=(-1, 1))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If we add another polarizer in the orthogonal direction, we will end up attenuating all of the light (by the definition of orthogonal). In order to combine Mueller matrices, we just use matrix multiplication from right to left","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"M = M_N cdot left(hdots cdot M_2 cdot left(M_1 right)right)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"M2 = linear_polarizer(90°)\nM = M2 * M0\nSp = M * S","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"the intensity is 0, so there is no remaining light.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"What do you expect to happen, though, if we insert a polarizer in-between the two orthogonal directions at an intermediate angle, say: 45°?","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"M1 = linear_polarizer(45°)\nM = M2 * M1 * M0\nSp = M * S","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"interestingly, despite light having to pass through two orthogonal polarization states (0° and 90°), due to the probabilistic nature of light 1/8 of the intensity passes through. To get a better intuition, let's look at the polarization ellipses at each stage","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"polellipse(M0 * S, label=\"0° LP\", lims=(-1, 1))\npolellipse!(M1 * M0 * S, label=\"0°+45° LP\")\npolellipse!(Sp, label=\"0°+45°+90° LP\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"TODO","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"angles = range(0°, 90°, length=100)\nintens = map(angles) do θ\n    M = M2 * linear_polarizer(θ) * M0\n    Sp = M * S\n    return Sp[1]\nend\nplot(angles, intens, leg=false, xlabel=\"θ\", ylabel=\"I\")\nvline!([45°], c=:black, ls=:dash, alpha=0.7)","category":"page"},{"location":"examples/#Differential-polarimetry","page":"Examples","title":"Differential polarimetry","text":"","category":"section"},{"location":"examples/#Generating-circularly-polarized-light","page":"Examples","title":"Generating circularly polarized light","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Mueller","category":"page"},{"location":"#Mueller.jl","page":"Home","title":"Mueller.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Code) (Image: Build Status) (Image: PkgEval) (Image: Coverage) (Image: License)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mueller matrices for common optical components such as polarizers, phase retarders, and attenuating filters. The matrices are built using StaticArrays.jl for speed and can be arbitrarily rotated.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Note not yet registered, please add the repo manually","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia>] add Mueller","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Import the library like any other Julia package","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Mueller","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mueller.jl provides building blocks for common components. Here I generate the Mueller matrix for an optical system comprising three linear polarizers, each rotated 45 degrees from the one prior. Notice the matrix multiplication is inverse the order of the optical components.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> M = linear_polarizer(π/2) * linear_polarizer(π/4) * linear_polarizer(0)\n4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n  0.125         0.125        0.0  0.0\n -0.125        -0.125        0.0  0.0\n -1.53081e-17  -1.53081e-17  0.0  0.0\n  0.0           0.0          0.0  0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"you'll notice some roundoff due to the finite precision of π/4, you can avoid this by using Unitful.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Unitful: °\n\njulia> M = linear_polarizer(90°) * linear_polarizer(45°) * linear_polarizer(0°)\n4×4 StaticArrays.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n  0.125   0.125  0.0  0.0\n -0.125  -0.125  0.0  0.0\n  0.0     0.0    0.0  0.0\n  0.0     0.0    0.0  0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"let's see what happens when completely unpolarized light passes through these filters. We can represent light using the Stokes vector","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> S = [1, 0, 0, 0] # I, Q, U, V\n4-element Vector{Int64}:\n 1\n 0\n 0\n 0\n\njulia> Sp = M * S\n4-element StaticArrays.SVector{4, Float64} with indices SOneTo(4):\n  0.125\n -0.125\n  0.0\n  0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"the output vector has 1/8 the total intensity of the original light, and it is 1/8 polarized in the +Q direction. This demonstrates the somewhat paradoxical quantum behavior of light (Bell's Theroem, inspired by this video): even though the light passes through two orthogonal linear polarizers (the 0° and 90° ones) because the wave equation operates probabilistically, 50% passes through the first polarizer, 50% of that light passes through the 45° polarizer, and then 50% of the remaining light passes through the final polarizer, combining to 1/8 of the original light.","category":"page"},{"location":"#Contributing-and-Support","page":"Home","title":"Contributing and Support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute, feel free to open a pull request. If you want to discuss something before contributing, head over to discussions and join or open a new topic. If you're having problems with something, please open an issue.","category":"page"}]
}
